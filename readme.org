#+TITLE: GNU Emacs como editor de código Python
#+AUTHOR: Edison Ibáñez
#+EMAIL: edison@disroot.org
#+DATE: 2018-10-28
#+LANGUAGE: es
#+DESCRIPTION: Introducción a GNU Emacs como IDE para Python
#+OPTIONS: num:t toc:nil ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS: tex:t d:nil todo:t pri:nil tags:nil
#+OPTIONS: timestamp:t
#+PROPERTY: header-args :eval never-export

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.7.0/
#+REVEAL_THEME: black
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_EXTRA_CSS: ./static/css/acm.css

#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{ragged2e}
#+LATEX_HEADER: \justify
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_CLASS_OPTIONS: [t,10pt]
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
#+OPTIONS: H:2

#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+BEAMER_THEME: Darmstadt
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines
#+BEAMER_HEADER: \usepackage{blindtext}
#+BEAMER_HEADER: \AtBeginSection[]{
#+BEAMER_HEADER: \begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}
#+BEAMER_HEADER: \subsection{}
#+BEAMER_HEADER: }
#+BEAMER_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}
#+BEAMER: \setbeamercovered{transparent=30}

* Introducción
** ¿Que es Emacs?
#+LATEX: \vfill
Es un editor de texto que dispone de gran cantidad de funciones.

En su manual se lo describe como "un editor extensible,
personalizable, auto-documentado y de tiempo real.

El *EMACS* original significa, Editor MACroS para el TECO. Fue escrito
en 1975 por *Richard Stallman* junto con *Guy Steele.*

* Instalación
** GNU Linux
   :PROPERTIES:
   :BEAMER_act: [<+->]
   :END:
#+LATEX: \setbeamercovered{transparent=30}
La mayoría de las distribuciones de GNU/Linux proporcionan Emacs
en sus repositorios, esta es la forma recomendada de Instalarlo, para
disponer de la ultima verison.
**** Archlinux                                                      :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_SRC sh
  $ sudo pacman -S emacs
#+END_SRC
**** Ubuntu/Debian y derivados                                      :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_SRC sh
  $ sudo apt-get install emacs
#+END_SRC
**** Fedora/Centos y derivados                                      :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_SRC sh
  $ sudo yum install emacs
#+END_SRC

** Otros Sistemas
#+LATEX: \vfill
Para mayor información se puede acceder al siguiente enlace: [[https://www.gnu.org/software/emacs/download.html][Emacs]]

* Uso de Emacs
** Comandos
Emacs utiliza combinaciones de teclas para realizar varias
acciones.

- Teclas:
  - Control (C)
  - Alt (Meta) (M)
  - Windows (Super) (s)

#+LATEX: \small
| Comando             | Tecla     | Descripción                                         |
|---------------------+-----------+-----------------------------------------------------|
| ~search-word~       | ~C-s~     | Buscar una palabra en el buffer.                    |
| ~undo~              | ~C-/~     | Deshacer el último cambio.                          |
| ~keyboard-quit~     | ~C-g~     | Abortar el comando actual.                          |
| ~find-file~         | ~C-x C-f~ | Buscar y abrir un archivo.                          |
| ~save-buffer~       | ~C-x C-s~ | Guardar.                                            |
| ~save-with-newname~ | ~C-x C-w~ | Guardar como.                                       |
| ~cut~               | ~C-w~     | Cortar todo el texto entre el marcador y el cursor. |
| ~copy~              | ~M-w~     | Copiar todo el texto entre el marcador y el cursor. |
| ~paste~             | ~C-y~     | Pegar texto del portapapeles de Emacs.              |

#+LATEX: \normalsize
Mayor información *C-h t*

** El Minibuffer
#+LATEX: \vfill
Es el espacio en el que Emacs pide información. Se puede introducir el
texto que se debe encontrar en una búsqueda, el nombre de un fichero
para leer o guardar e información similar.

** Gestión de ficheros y visualización
#+LATEX: \vfill
Emacs permite la edición y visualización de ficheros mediante el uso
de *buffers*, cada vez que se abre un archivo o fichero se crea un
nuevo buffer con el nombre del archivo.

Mayor información [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffers.html][Buffers]]

* Configuracion
** Configuración y Paquetes
La configuración de Emacs se la hace usando el dialecto *[[https://en.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp]]* que
también es llamado *[[https://en.wikipedia.org/wiki/Emacs_Lisp][elisp]]*.

Pero también se la puede hacer usando *ORGMODE* mediante *[[https://daemons.it/posts/programaci%25C3%25B3n-literaria-para-sysadmins-/-devops/][Programación literaria]]*

*** Archivo de Configuración
Lo primero que tenemos que tomar en cuenta es donde tenemos que ubicar el
archivo de configuración.

En los sistemas *GNU Linux* el archivo se localiza en *$HOME/.emacs.d/init.el*.
Mas información en [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][Where do I put my init file?]]

*** Repositorios
Antes de empezara a instalar los paquetes para *Emacs* se debe especificar
los repositorios que utilizara *[[https://www.emacswiki.org/emacs/ELPA][ELPA]]*.
#+BEGIN_SRC emacs-lisp
  (setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/"))
      package-archive-priorities
      '(("melpa" . 10)
        ("gnu" . 5)
        ("org" . 0)))
#+END_SRC

** Styling (Themes & More)
* Elpy - Python Development
** Introducción
The Emacs Lisp Python Environment in Emacs

Elpy is an Emacs package to bring powerful Python editing to Emacs.
It combines a number of existing Emacs packages, both written in
Emacs Lisp as well as Python.

** Instalación
#+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :diminish elpy-mode
      :config
      (elpy-enable)
      (setq elpy-rpc-backend "jedi"
            elpy-shell-echo-input nil
            elpy-modules (dolist (elem
                                  '(elpy-module-sane-defaults
                                    elpy-module-company
                                    elpy-module-eldoc
                                    elpy-module-highlight-indentation
                                    elpy-module-pyvenv
                                    elpy-module-yasnippet))))

      (add-to-list 'company-backends 'elpy-company-backend)
      (require 'smartparens-python)
      (with-eval-after-load 'python
        (defun python-shell-completion-native-try ()
          "Return non-nil if can trigger native completion."
          (let ((python-shell-completion-native-enable t)
                (python-shell-completion-native-output-timeout
                 python-shell-completion-native-try-output-timeout))
            (python-shell-completion-native-get-completions
             (get-buffer-process (current-buffer))
             nil "_"))))

      (when (require 'flycheck nil t)
        (validate-setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
        (add-hook 'elpy-mode-hook 'flycheck-mode))

      (use-package flycheck-pycheckers
        :ensure t
        :after flycheck
        :config (setq flycheck-pycheckers-checkers (quote (pylint pep8 flake8 bandit))
                      flycheck-pycheckers-ignore-codes (quote ("C0411" "C0413" "C0103" "C0111"
                                                               "W0142" "W0201" "W0232" "W0403"
                                                               "W0511" "E1002" "E1101" "E1103"
                                                               "R0201" "R0801" "R0903" "R0904"
                                                               "R0914" "W0212" "C0301" "E501")))

        :hook (flycheck-mode . flycheck-pycheckers-setup))

      (defun format-all-on-save ()
        (interactive)
        (add-hook 'before-save-hook 'format-all-buffer nil t))
      (add-hook 'elpy-mode-hook 'format-all-on-save)

      (defun add-breakpoint ()
        "Add a break point"
        (interactive)
        (newline-and-indent)
        (insert "import wdb; wdb.set_trace()"))

      (define-key elpy-mode-map (kbd "C-c C-b") 'add-breakpoint))

#+END_SRC
* Additional Python Features
** Better Syntax Checking (Flycheck v. Flymake)
** PEP8 Compliance (Autopep8)
** IPython/Jupyter Integration
* Additional Emacs Features
** Git Integration (Magit)
** Other Modes
** Emacs In The Terminal
* Conclusion
|   1 |   2 |    3 |
|-----+-----+------|
| Uno | Dos | Tres |
|     |     |      |
