#+TITLE:     GNU Emacs como editor de código Python
#+AUTHOR:    Edison Ibáñez
#+EMAIL:     edison@disroot.org
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS: toc:nil

# started this on 2010-03-30 Tue

# this allows defining headlines to be exported/not be exported
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# By default I do not want that source code blocks are evaluated on export. Usually
# I want to evaluate them interactively and retain the original results.
#+PROPERTY: header-args :eval never-export

# https://github.com/fniessen/refcard-org-beamer
# https://github.com/dfeich/org-babel-examples/
# https://realpython.com/emacs-the-best-python-editor/
# https://daemons.it/posts/convertir-emacs-en-un-ide-de-python/
# https://daemons.it/posts/use-package-aislar-la-configuraci%C3%B3n-de-cada-paquete/
# https://daemons.it/posts/hacer-la-configuraci%C3%B3n-de-emacs-auto-instalable/

* Reveal Configuration                                             :noexport:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.7.0/
#+REVEAL: split
#+REVEAL_THEME: black

* Beamer configuration                                             :noexport:
** Basic
# this triggers loading the beamer menu (C-c C-b) when the file is read

#+LaTeX_CLASS: beamer
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{ragged2e}
#+LATEX_HEADER: \justify
#+LaTeX_CLASS_OPTIONS: [t,9pt]

#+STARTUP: beamer

#    Latex CLASS OPTIONS
# [bigger]
# [presentation]
# [handout] : print handouts, i.e. slides with overlays will be printed with
#   all overlays turned on (no animations).
# [notes=show] : show notes in the generated output (note pages follow the real page)
# [notes=only] : only render the nodes pages

# this setting affects whether the initial PSI picture correctly fills
# the title page, since it scales the title text. One can also use the
# notes=show or notes=only options to produce notes pages in the output.
# #+LaTeX_CLASS_OPTIONS: [t,10pt,notes=show]

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# export second level headings as beamer frames. All headlines below
# the org-beamer-frame-level (i.e. below H value in OPTIONS), are
# exported as blocks
#+OPTIONS: H:2

** Beamer Theme Definition
#+BEAMER_THEME: metropolis
# Note: custom style files can be placed centrally in the user specific directory
# ~/texmf/tex. This will be searched recursively, so substructures are possible.
# q.v. http://tex.stackexchange.com/questions/1137/where-do-i-place-my-own-sty-or-cls-files-to-make-them-available-to-all-my-te

# One could also fine tune a number of theme settings instead of specifying the full theme
# #+BEAMER_COLOR_THEME: default
# #+BEAMER_FONT_THEME: professionalfonts
# #+BEAMER_INNER_THEME:
# #+BEAMER_OUTER_THEME: miniframes [subsection=false]
# #+LATEX_CLASS: beamer
# #+BEAMER_FRAME_LEVEL: 2

** changes to BeginSection for TOC and navigation
#+BEAMER_HEADER: \AtBeginSection[]{

# This line inserts a table of contents with the current section highlighted at
# the beginning of each section
#+BEAMER_HEADER: \begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}

# In order to have the miniframes/smoothbars navigation bullets even though we do not use subsections
# q.v. https://tex.stackexchange.com/questions/2072/beamer-navigation-circles-without-subsections/2078#2078
#+BEAMER_HEADER: \subsection{}
#+BEAMER_HEADER: }

** misc configuration
# I want to define a style for hyperlinks
#+BEAMER_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}

# this can be used to define the transparency of the covered layers
#+BEAMER: \setbeamercovered{transparent=30}



** Some remarks on options
   - [[info:org#Export%20settings][info:org#Export settings]]
   - The H:2 setting in the options line is important for setting the
     Beamer frame level. Headlines will become frames when their level
     is equal to =org-beamer-frame-level=.
   - ^:{} interpret abc_{subs} as subscript, but not abc_subs
   - num:t configures whether to use section numbers. If set to a number
     only headlines of this level or above will be numbered
   - ::t defines that lines starting with ":" will use fixed width font
   - |:t include tables in export
   - -:t Non-nil means interpret "\-", "--" and "---" for export.
   - f:t include footnotes
   - *:t Non-nil means interpret
     : *word*, /word/, _word_ and +word+.
   - <:t toggle inclusion of timestamps
   - timestamp:t include a document creation timestamp into the exported file
   - todo:t include exporting of todo keywords
   - d:nil do not export org heading drawers
   - tags:nil do not export headline tags

** addtional LaTeX packages

   # for generating example texts for testing
   #+BEAMER_HEADER: \usepackage{blindtext}

* Introducción
** ¿Que es ~GNU Emacs~?
   #+ATTR_HTML: :width 200
   #+ATTR_LaTeX: :width 2cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs

   Es un editor de texto libre, de código abierto, extensible y
   personalizable, es multiplataforma y lo encontraremos disponible para
   *Gnu/Linux, Windows y Mac*. Además está desarrollado por el proyecto GNU y
   publicado bajo licencia GNU GPL.

** ¿Como instalar ~GNU Emacs~?                                     :noexport:
   #+ATTR_HTML: :width 200
   #+ATTR_LaTeX: :width 2cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   ~GNU Emacs~ viene en todas de Distribuciones GNU/Linux, por lo
   que se lo puede instalar desde los repositorios oficiales de cada
   una.
   Para encontrar instrucciones mas detallas de como instalar ~GNU
   Emacs~ en cualquier Sistema Operativo pueden visitar el siguiente
   sitio: [[https://www.gnu.org/software/emacs/download.html][https://www.gnu.org/software/emacs/download.html]]

** ¿Que es ~Python~?                                               :noexport:
   #+ATTR_HTML: :width 200
   #+ATTR_LaTeX: :width 2cm
   [[file:img/python.png]]
   #+CAPTION: python

   Python es un lenguaje de programación interpretado cuya filosofía hace
   hincapié en una sintaxis que favorezca un código legible.
   Creado a finales de los ochenta por *Guido van Rossum* en el Centro para
   las Matemáticas y la Informática....

** ¿Que es un ~IDE~?                                               :noexport:
   Un entorno de desarrollo integrado o entorno de desarrollo
   interactivo, en inglés Integrated Development Environment (IDE).
   - Características:
     + Multiplataforma
     + Soporte para diversos lenguajes de programación
     + Integración con Sistemas de Control de Versiones
     + Reconocimiento de Sintaxis
     + Extensiones y Componentes para el IDE
     + Integración con Framework populares
     + Depurador
     + Importar y Exportar proyectos
     + Múltiples idiomas
     + Manual de Usuarios y Ayuda

* GNU Emacs                                                        :noexport:
** GNU Emacs
   #+BEGIN_EXPORT beamer
   \vspace{0.3\textheight}
   \begin{center}
     \begin{minipage}[h]{.75\textwidth}
       \centering
       {\Huge GNU Emacs}
     \end{minipage}
   \end{center}
   #+END_EXPORT

** Uso Básico
   #+ATTR_HTML: :width 200
   #+ATTR_LaTeX: :width 2cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   ~GNU Emacs~ trae con sigo un excelente tutorial, para acceder a
   este bata con presionar la combinación de teclas: ~<C-h> t~.

** Archivo de Configuración
   #+ATTR_HTML: :width 200
   #+ATTR_LaTeX: :width 2cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   La configuración de ~GNU Emacs~ se la hace usando el lenguaje [[https://en.wikipedia.org/wiki/Emacs_Lisp][elisp o Emacs
   Lisp]], para esto es necesario crear un archivo llamado ~init.el~ en el ~$HOME~
   de nuestro usuario[fn:1]:
*** Shell                                                     :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC shell
      $ touch ~/.emacs.d/init.el
    #+END_SRC

** Garbage Collection o Recolección de Basura
   Para darle un poco de velocidad al momento de cargar nuestra
   configuración, vamos a establecer el umbral de ~Garbage Collection~
   alto durante el inicio.
*** Emacs Lisp                                                      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_opt: allowframebreaks,label=
    :END:
    #+LATEX: \scriptsize
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC emacs-lisp
      ;;; init.el --- .Emacs Configuration -*- lexical-binding: t -*-
      ;;; Commentary:
      ;; This config start here

      ;;; Code:
      ;; ref: https://blog.d46.us/advanced-emacs-startup/
      (defvar cfg--file-name-handler-alist file-name-handler-alist)
      (setq gc-cons-threshold 402653184
            gc-cons-percentage 0.6
            file-name-handler-alist nil)

    #+END_SRC

** Configuración de Repositorios
   Antes de empezar a editar la configuración de ~GNU Emacs~, debemos
   indicarle al ~ELPA~ de donde debe descargar los paquetes, para esto
   configuramos los repositorios de la siguiente manera.
*** Emacs Lisp                                                      :B_block:
    :PROPERTIES:
    :BEAMER_col: 0.8
    :BEAMER_env: block
    :BEAMER_opt: allowframebreaks,label=
    :END:
    #+LATEX: \scriptsize
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC emacs-lisp
      (setq package-archives
          '(("gnu" . "http://elpa.gnu.org/packages/")
            ("melpa" . "http://melpa.org/packages/")
            ("org" . "https://orgmode.org/elpa/"))
          package-archive-priorities
          '(("melpa" . 10)
            ("gnu" . 5)
            ("org" . 0)))
    #+END_SRC

** use-package, bind-key, diminish
   ~use-package~ es una *macro declaración* que permite aislar la
   configuración de un paquete en nuestro archivo ~$HOME/.emacs.d/init.el~
*** Emacs Lisp
    :PROPERTIES:
    :BEAMER_col: 0.8
    :BEAMER_env: block
    :BEAMER_opt: allowframebreaks,label=
    :END:
    #+LATEX: \scriptsize
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC emacs-lisp
      (setq load-prefer-newer t)
      ;; initialize the packages and create the packages list if not exists
      (package-initialize)
      (when (not package-archive-contents)
        (package-refresh-contents))

      ;; install use-package if not exists
      (unless (package-installed-p 'use-package)
        (package-install 'use-package))

      (eval-when-compile
        (require 'use-package))
      (require 'diminish)
      (require 'bind-key)
    #+END_SRC

** Cache
   Para mantener lo mas limpio posible nuestro directorio
   ~$HOME/.emacs.d~ vamos a utilizar el paquete ~no-littering~, y
   vamos a empezar a enviar todo el contenido que no forme parte de
   nuestra configuración.
*** Emacs Lisp                                                      :B_block:
    :PROPERTIES:
    :BEAMER_col: 0.8
    :BEAMER_env: block
    :BEAMER_opt: allowframebreaks,label=
    :END:
    #+LATEX: \scriptsize
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC emacs-lisp
      (use-package no-littering
          :ensure t
          :init
          (setq no-littering-var-directory
                (expand-file-name "cache/var/" user-emacs-directory)
                no-littering-etc-directory
                (expand-file-name "cache/etc/" user-emacs-directory)))


      (setq-default semanticdb-default-save-directory
                    (concat no-littering-var-directory "semanticdb")
                    url-configuration-directory
                    (concat no-littering-var-directory "url")
                    eshell-directory-name
                    (concat no-littering-var-directory "eshell" ))
    #+END_SRC
** Bookmarks
*** Emacs Lisp                                                      :B_block:
    :PROPERTIES:
    :BEAMER_col: 0.8
    :BEAMER_env: block
    :BEAMER_opt: allowframebreaks,label=
    :END:
    #+LATEX: \scriptsize
    #+ATTR_LATEX: :options xleftmargin=20pt, linenos
    #+BEGIN_SRC emacs-lisp
      (use-package bookmark
          :config
          (setq bookmark-default-file
                (concat no-littering-var-directory "bookmarks"))
          (when (file-exists-p bookmark-default-file)
            (bookmark-load bookmark-default-file t)))
    #+END_SRC

* Footnotes

[fn:2] [[https://es.wikipedia.org/wiki/Entorno_de_desarrollo_integrado][Entorno de Desarrollo Integrado]]

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html#Location-of-init-file][Location of Init File]]
