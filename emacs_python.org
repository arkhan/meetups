#+TITLE:     GNU Emacs como editor de código Python
#+AUTHOR:    Edison Ibáñez
#+EMAIL:     edison@disroot.org

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS:   num:t toc:nil ::t |:t ^:{} -:t f:t *:t <:t date:nil author:nil
#+OPTIONS:   tex:t d:nil todo:t pri:nil tags:nil
#+OPTIONS:   timestamp:nil

# started this on 2010-03-30 Tue

# this allows defining headlines to be exported/not be exported
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# By default I do not want that source code blocks are evaluated on export. Usually
# I want to evaluate them interactively and retain the original results.
#+PROPERTY: header-args :eval never-export

# https://github.com/fniessen/refcard-org-beamer
# https://github.com/dfeich/org-babel-examples/
# https://realpython.com/emacs-the-best-python-editor/
# https://daemons.it/posts/convertir-emacs-en-un-ide-de-python/
# https://daemons.it/posts/use-package-aislar-la-configuraci%C3%B3n-de-cada-paquete/
# https://daemons.it/posts/hacer-la-configuraci%C3%B3n-de-emacs-auto-instalable/


* Beamer configuration                                             :noexport:
** Basic
# this triggers loading the beamer menu (C-c C-b) when the file is read
#+startup: beamer

#+LaTeX_CLASS: beamer
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{ragged2e}
#+LATEX_HEADER: \justify
#+LaTeX_HEADER: \usemintedstyle{emacs}

#    Latex CLASS OPTIONS
# [bigger]
# [presentation]
# [handout] : print handouts, i.e. slides with overlays will be printed with
#   all overlays turned on (no animations).
# [notes=show] : show notes in the generated output (note pages follow the real page)
# [notes=only] : only render the nodes pages

# this setting affects whether the initial PSI picture correctly fills
# the title page, since it scales the title text. One can also use the
# notes=show or notes=only options to produce notes pages in the output.
# #+LaTeX_CLASS_OPTIONS: [t,10pt,notes=show]

#+LaTeX_CLASS_OPTIONS: [t,10pt]

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# export second level headings as beamer frames. All headlines below
# the org-beamer-frame-level (i.e. below H value in OPTIONS), are
# exported as blocks
#+OPTIONS: H:2

** Beamer Theme Definition
#+BEAMER_THEME: Madrid
# Note: custom style files can be placed centrally in the user specific directory
# ~/texmf/tex. This will be searched recursively, so substructures are possible.
# q.v. http://tex.stackexchange.com/questions/1137/where-do-i-place-my-own-sty-or-cls-files-to-make-them-available-to-all-my-te

# One could also fine tune a number of theme settings instead of specifying the full theme
# #+BEAMER_COLOR_THEME: default
# #+BEAMER_FONT_THEME: professionalfonts
# #+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME: miniframes [subsection=false]
# #+LATEX_CLASS: beamer


** changes to BeginSection for TOC and navigation
#+BEAMER_HEADER: \AtBeginSection[]{

# This line inserts a table of contents with the current section highlighted at
# the beginning of each section
#+BEAMER_HEADER: \begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}

# In order to have the miniframes/smoothbars navigation bullets even though we do not use subsections
# q.v. https://tex.stackexchange.com/questions/2072/beamer-navigation-circles-without-subsections/2078#2078
#+BEAMER_HEADER: \subsection{}
#+BEAMER_HEADER: }

** misc configuration
# I want to define a style for hyperlinks
#+BEAMER_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}

# this can be used to define the transparency of the covered layers
#+BEAMER: \setbeamercovered{transparent=30}



** Some remarks on options
   - [[info:org#Export%20settings][info:org#Export settings]]
   - The H:2 setting in the options line is important for setting the
     Beamer frame level. Headlines will become frames when their level
     is equal to =org-beamer-frame-level=.
   - ^:{} interpret abc_{subs} as subscript, but not abc_subs
   - num:t configures whether to use section numbers. If set to a number
     only headlines of this level or above will be numbered
   - ::t defines that lines starting with ":" will use fixed width font
   - |:t include tables in export
   - -:t Non-nil means interpret "\-", "--" and "---" for export.
   - f:t include footnotes
   - *:t Non-nil means interpret
     : *word*, /word/, _word_ and +word+.
   - <:t toggle inclusion of timestamps
   - timestamp:t include a document creation timestamp into the exported file
   - todo:t include exporting of todo keywords
   - d:nil do not export org heading drawers
   - tags:nil do not export headline tags

** addtional LaTeX packages

   # for generating example texts for testing
   #+BEAMER_HEADER: \usepackage{blindtext}


* Introducción

** Introducción
   #+BEGIN_EXPORT beamer
   \vspace{0.3\textheight}
   \begin{center}
     \begin{minipage}[h]{.75\textwidth}
       \centering
       {\Huge Introducción}
     \end{minipage}
   \end{center}
   #+END_EXPORT

** ¿Que es ~GNU Emacs~?
   #+ATTR_LaTeX: :width 3cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs

   Es un editor de texto libre, de código abierto, extensible y
   personalizable, es multiplataforma y lo encontraremos disponible para
   *Gnu/Linux, Windows y Mac*. Además está desarrollado por el proyecto GNU y
   publicado bajo licencia GNU GPL.

** ¿Como instalar ~GNU Emacs~?
   #+ATTR_LaTeX: :width 3cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   ~GNU Emacs~ viene en todas de Distribuciones GNU/Linux, por lo
   que se lo puede instalar desde los repositorios oficiales de cada
   una.
   Para encontrar instrucciones mas detallas de como instalar ~GNU
   Emacs~ en cualquier Sistema Operativo pueden visitar el siguiente
   sitio: [[https://www.gnu.org/software/emacs/download.html][https://www.gnu.org/software/emacs/download.html]]

** ¿Que es ~Python~?
   #+ATTR_LaTeX: :width 3cm
   [[file:img/python.png]]
   #+CAPTION: python

   Python es un lenguaje de programación interpretado cuya filosofía hace
   hincapié en una sintaxis que favorezca un código legible.
   Creado a finales de los ochenta por *Guido van Rossum* en el Centro para
   las Matemáticas y la Informática....

** ¿Que es un ~IDE~?
   Un entorno de desarrollo integrado o entorno de desarrollo
   interactivo, en inglés Integrated Development Environment (IDE).
   - Características:
     1. Multiplataforma
     2. Soporte para diversos lenguajes de programación
     3. Integración con Sistemas de Control de Versiones
     4. Reconocimiento de Sintaxis
     5. Extensiones y Componentes para el IDE
     6. Integración con Framework populares
     7. Depurador
     8. Importar y Exportar proyectos
     9. Múltiples idiomas
     10. Manual de Usuarios y Ayuda
* GNU Emacs

** GNU Emacs
   #+BEGIN_EXPORT beamer
   \vspace{0.3\textheight}
   \begin{center}
     \begin{minipage}[h]{.75\textwidth}
       \centering
       {\Huge GNU Emacs}
     \end{minipage}
   \end{center}
   #+END_EXPORT

** Uso Básico
   #+ATTR_LaTeX: :width 3cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   ~GNU Emacs~ trae con sigo un excelente tutorial, para acceder a
   este bata con presionar la combinación de teclas: ~<C-h> t~.

** Configuración
   #+ATTR_LaTeX: :width 3cm
   [[file:img/emacs.png]]
   #+CAPTION: emacs
   La configuración de ~GNU Emacs~ se la hace usando el lenguaje [[https://en.wikipedia.org/wiki/Emacs_Lisp][elisp o Emacs
   Lisp]], para esto es necesario crear un archivo llamado ~init.el~ en el ~$HOME~
   de nuestro usuario:
*** Shell                                                           :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    #+BEGIN_SRC shell
      $ touch ~/.emacs.d/init.el
    #+END_SRC
*** ign                                                     :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
    Para mayor información se puede vitar el siguiente enlace
    [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html#Location-of-init-file][Ubicación de Archivo init.el]]

** Paquetes
*** Repositorios                                                    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    #+BEGIN_SRC emacs-lisp
      (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                               ("melpa" . "http://melpa.org/packages/")
                               ("org" . "https://orgmode.org/elpa/"))
            package-archive-priorities '(("melpa" . 10)
                                         ("gnu" . 5)
                                         ("org" . 0)))
    #+END_SRC
